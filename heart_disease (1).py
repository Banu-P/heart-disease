# -*- coding: utf-8 -*-
"""Heart Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CYHrDFu_kCsBX6HWUxk5w5raj0AOKEbj
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
files.upload()

df = pd.read_csv("/content/OneDrive_2024-07-03.zip")

df.head()

df.tail()

df.info()

df.describe()

df.shape

df.isnull().sum()

df.duplicated().sum()

df.columns

df.nunique()

df.corr()

df.corr().style.background_gradient(cmap='coolwarm')

# Exploratory Data Analysis (EDA)
def plot_eda(df):
    plt.figure(figsize=(18, 14))

    # Distribution of features
    plt.subplot(3, 2, 1)
    sns.histplot(df['age'], kde=True, bins=30)
    plt.title('Age Distribution')

    plt.subplot(3, 2, 2)
    sns.histplot(df['chol'], kde=True, bins=30)
    plt.title('Cholesterol Distribution')

    plt.subplot(3, 2, 3)
    sns.boxplot(x='target', y='age', data=df)
    plt.title('Age vs Target')

    plt.subplot(3, 2, 4)
    sns.boxplot(x='target', y='chol', data=df)
    plt.title('Cholesterol vs Target')

    plt.subplot(3, 2, 5)
    sns.countplot(x='target', data=df)
    plt.title('Count of Heart Disease Cases')

    plt.subplot(3, 2, 6)
    sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
    plt.title('Correlation Heatmap')

    plt.tight_layout()
    plt.show()
# Perform EDA
plot_eda(df)

def detect_outliers_iqr(df):
    Q1 = df.quantile(0.25)
    Q3 = df.quantile(0.75)
    IQR = Q3 - Q1
    outliers = (df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))
    return outliers

# Apply outlier detection
outliers = detect_outliers_iqr(df)
print("Outlier Detection Summary:")
print(outliers.sum())

# Plot box plots for outlier detection
def plot_boxplots(df):
    plt.figure(figsize=(16, 12))
    num_features = len(df.columns)
    for i, column in enumerate(df.columns):
        plt.subplot((num_features + 2) // 3, 3, i + 1)
        sns.boxplot(y=df[column])
        plt.title(f'Box Plot of {column}')

    plt.tight_layout()
    plt.show()

# Plot box plots
plot_boxplots(df)

from sklearn.model_selection import train_test_split, GridSearchCV

X = df.drop('target', axis=1)
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc

# Initialize models
models = {
    'Logistic Regression': LogisticRegression(max_iter=1000),
    'Random Forest': RandomForestClassifier(),
    'SVM': SVC(probability=True),  # probability=True is required for ROC curve
    'Decision Tree': DecisionTreeClassifier()
}

# Train and evaluate models
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]  # Probabilities for ROC curve

    print(f"\n{name} Model Evaluation:")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))

    # Confusion Matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,
                xticklabels=['No Disease', 'Disease'],
                yticklabels=['No Disease', 'Disease'])
    plt.title(f'Confusion Matrix for {name}')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()


    # ROC Curve
    fpr, tpr, _ = roc_curve(y_test, y_proba)
    roc_auc = auc(fpr, tpr)
    plt.figure(figsize=(8, 6))
    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title(f'Receiver Operating Characteristic (ROC) Curve for {name}')
    plt.legend(loc='lower right')
    plt.show()

param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30]
}
grid_search = GridSearchCV(RandomForestClassifier(), param_grid, cv=5)
grid_search.fit(X_train, y_train)
print("Best Parameters:", grid_search.best_params_)
best_model = grid_search.best_estimator_
y_pred_best = best_model.predict(X_test)
print("Best Model Accuracy:", accuracy_score(y_test, y_pred_best))

# Save the model
with open('random_forest_model.pkl', 'wb') as model_file:
    pickle.dump(RandomForestClassifier, model_file)

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import StandardScaler

# Load the model
with open('random_forest_model.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

# Load the scaler if used in preprocessing
# with open('scaler.pkl', 'rb') as scaler_file:
#     scaler = pickle.load(scaler_file)
# Define function for prediction
def predict_heart_disease(features):
    prediction = model.predict([features])
    return prediction[0]

# Streamlit UI
st.title('Heart Disease Prediction App')
# Input features
age = st.number_input('Age', min_value=0, max_value=120, value=30)
sex = st.selectbox('Sex', [0, 1])  # Assuming 0 = female, 1 = male
cp = st.selectbox('Chest Pain Type', [0, 1, 2, 3])  # Adjust based on your dataset
trestbps = st.number_input('Resting Blood Pressure', min_value=0, max_value=200, value=120)
chol = st.number_input('Serum Cholestoral', min_value=0, max_value=600, value=200)
fbs = st.selectbox('Fasting Blood Sugar', [0, 1])  # Assuming 0 = <= 120 mg/dl, 1 = > 120 mg/dl
restecg = st.selectbox('Resting Electrocardiographic Results', [0, 1, 2])  # Adjust based on your dataset
thalach = st.number_input('Maximum Heart Rate Achieved', min_value=0, max_value=250, value=150)
exang = st.selectbox('Exercise Induced Angina', [0, 1])  # Assuming 0 = no, 1 = yes
oldpeak = st.number_input('Depression Induced by Exercise Relative to Rest', min_value=0.0, max_value=10.0, value=1.0)
slope = st.selectbox('Slope of the Peak Exercise ST Segment', [0, 1, 2])  # Adjust based on your dataset
ca = st.selectbox('Number of Major Vessels Colored by Fluoroscopy', [0, 1, 2, 3])  # Adjust based on your dataset
thal = st.selectbox('Thalassemia', [0, 1, 2, 3])  # Adjust based on your dataset

# Prepare feature array
features = [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]

# Predict button
if st.button('Predict'):
    result = predict_heart_disease(features)
    st.write(f'Prediction: {"Heart Disease" if result == 1 else "No Heart Disease"}')